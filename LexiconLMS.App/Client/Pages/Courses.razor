@page "/courses"
@using LexiconLMS.App.Client.Services;
@using Microsoft.AspNetCore.Authorization;
@inject LMSClient lsmClient;
@attribute [Authorize]

<BlockGroupTemplate Items="CourseList" Context="item" Collapsable="false" Cols="1" Id="section-courses" TableHeaders="TableHeaderList">
    <GroupHeader>Courses</GroupHeader>
    <TableTemplate Context="item">
        <tr>
            <th scope="row">@item.Id</th>
            <td><span class="badge bg-success">Published</span></td>
            <td><span class="fw-bold">@item.Title</span></td>
            <td>@item.StartTime</td>
            <td>@item.EndTime</td>
            <td class="text-end">
               <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button class="btn btn-primary btn-sm" @onclick="() => ModalShow(item.Id)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => ModalShow(item.Id)">Delete</button>
                </div>
            </td>
        </tr>
    </TableTemplate>

</BlockGroupTemplate>

@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Confirm action</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <CreateForm Course="@SelectedCourse"></CreateForm>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
                </div>

            </div>
        </div>
    </div>
}

@code {
    private List<CourseDto> CourseList { get; set; } = new();
    private List<string> TableHeaderList { get; set; } = new();
    CourseDto SelectedCourse { get; set; }
    protected override async Task OnInitializedAsync()
    {
        CourseList = (await lsmClient.GetAsync<CourseDto>("api/courses")).ToList();
        //TableHeaderList = CourseList.FirstOrDefault().GetCourseMembers();
        TableHeaderList = new() {"#","Status","Title","Start Time","End Time", "" };
        Console.WriteLine(TableHeaderList.Count);
    }

    bool showModal = false;

    //void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }
    void ModalShow(int id)
    {
        SelectedCourse = CourseList.FirstOrDefault(c => c.Id == id);
        showModal = true;
    }
}
