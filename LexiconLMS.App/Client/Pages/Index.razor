@using AutoMapper;
@using LexiconLMS.App.Client.Models;
@using Microsoft.AspNetCore.Authorization;
@using LexiconLMS.App.Client.Services;
@using System.Diagnostics;

@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime JsRuntime
@inject LMSClient lmsClient;
@inject IMapper mapper;
@inject AlertService AlertService

@page "/"
@attribute [Authorize]

<PageTitle>@SelectedCourse.Title</PageTitle>

<h1 class="text-end text-muted">@($"{SelectedCourse.Title} {SelectedCourse.StartTime.ToString("yy-MM-dd")} - {SelectedCourse.EndTime.ToString("yy-MM-dd")}")</h1>

<AlertComponent />

@* block for courses table *@
<BlockGroupTemplate Items="CourseList" Context="item" Collapsable="false" Cols="1" Id="section-courses" TableHeaders="TableHeaderList">
    <GroupHeader>Courses</GroupHeader>
    <NewButton><button class="btn btn-primary btn-sm ms-4" @onclick="() => OpenDialog(new ModalForm(){Id=0,Type=ModalType.Course})">New Course</button></NewButton>
    <TableTemplate Context="item">
        <tr>
            <th scope="row">@item.Id</th>
            <td><span class="badge bg-success">Published</span></td>
            <td><span class="fw-bold">@item.Title</span></td>
            <td>@item.StartTime</td>
            <td>@item.EndTime</td>
            <td>@item.Modules.Count</td>
            <td class="text-end">
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button class="btn btn-primary btn-sm" @onclick="() => SelectCourse(item.Id)">Select</button>
                    <button class="btn btn-primary btn-sm" @onclick="() => OpenDialog(new ModalForm(){Id=item.Id,Type=ModalType.Course})">Edit</button>
                    @*<button class="btn btn-danger btn-sm" @onclick="() => ModalShow(item.Id)">Delete</button>*@
                </div>
            </td>
        </tr>
    </TableTemplate>
</BlockGroupTemplate>

@* block for module cards *@
<BlockGroupTemplate Items="ModuleList" Context="item" Collapsable="false" Cols="4" Id="section-modules">
    <GroupHeader>Modules for @SelectedCourse.Title</GroupHeader>
    <NewButton><button class="btn btn-primary btn-sm ms-4" @onclick="() => OpenDialog(new ModalForm(){Type=ModalType.Module})">New Module</button></NewButton>
    <CardTemplate Context="item">
        <CardModule CardClick="OnModuleSelect" EditClick="OpenDialog" item="item" Muted="true"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>


@* block for activity cards *@
<BlockGroupTemplate Items="ActivityList" Context="item" Collapsable="false" Cols="1" Id="section-activities" Links="true">
    <GroupHeader>My Activities for @SelectedModule.Title</GroupHeader>
    <NewButton><button class="btn btn-primary btn-sm ms-4" @onclick="() => OpenDialog(new ModalForm(){Type=ModalType.Activity})">New Activity</button></NewButton>
    <LinkTemplate>
        <div><a style="cursor:pointer;text-decoration:underline;" @onclick="()=>OnActivitySelect(item.Title)">@item.Title</a></div>
    </LinkTemplate>
    <CardTemplate Context="item">
        <CardModule EditClick="OpenDialog" item="item" Shadow="true" Muted="false" Time="true"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>



@if (DialogIsOpen)
{
    <ModalTemplate Caption="@caption"
               OnClose="@OnDialogClose"
               Type="@modalType">
        <FormTemplate>
            <TestForm @ref="editForm" Item="@selectedItem" Parent="@selectedItemParent">
            </TestForm>
        </FormTemplate>
    </ModalTemplate>
}


@code {
    //the lists of items
    private List<CourseDto> CourseList { get; set; } = new();
    private List<ModuleDto> ModuleList {

        get { 
            if (SelectedCourse == null || SelectedCourse.Id == 0)
            {
                SelectedCourse = CourseList.FirstOrDefault() ?? new();
            }
            return CourseList.FirstOrDefault(c => c.Id == SelectedCourse?.Id, new()).Modules ?? new(); 
        }
        set { ModuleList = value; }
    }
    private List<ActivityDto> ActivityList
    {
        get { 
            if (SelectedModule.Id == 0)
            {
                SelectedModule = ModuleList.FirstOrDefault() ?? new();
            }
            return ModuleList.FirstOrDefault(m => m.Id == SelectedModule?.Id, new()).Activities ?? new(); 
        }
        set { ActivityList = value; }
    }


    //to keep track of selected objects
    private CourseDto? SelectedCourse { get; set; } = new();
    private ModuleDto? SelectedModule { get; set; } = new();

    //to use with the form
    //Copy of dto
    private IEntityDto? selectedItem;
    private IEntityDto? selectedItemParent;

    //reference to the editform and it's members
    private TestForm? editForm;

    //for the modal
    private string caption = string.Empty;
    private bool DialogIsOpen = false;
    private ModalTemplate.Category modalType;

    //table headers for the course table
    public List<string> TableHeaderList = new() { "#", "Status", "Title", "Start Time", "End Time", "# Modules", "" };


    protected override async Task OnInitializedAsync()
    {
        await UpdateCourseList();
        await GetUserCourse();
    }

    //get the correct course for the logged in user
    private async Task GetUserCourse()
    {
        //get the course for the logged in user, since it's a string try to parse
        var userCourseIdStr = (await authStateProvider.GetAuthenticationStateAsync()).User.FindFirst("CourseId")?.Value;
        var userCourseIdInt = 0;

        if (!string.IsNullOrEmpty(userCourseIdStr))
        {
            try
            {
                userCourseIdInt = Int32.Parse(userCourseIdStr);
            }
            catch (FormatException)
            {
                Console.WriteLine($"Unable to parse '{userCourseIdStr}'");
            }

            if (userCourseIdInt > 0)
            {
                await SelectCourse(userCourseIdInt);
            }
        }
    }


    //form modal
    private void OpenDialog(ModalForm parameters)
    {
        var type = parameters.Type;
        DialogIsOpen = true;

        @switch (type)
        {
            case ModalType.Course:
                CastItem(parameters.Id, CourseList);
                break;
            case ModalType.Module:
                selectedItemParent = SelectedCourse; //this is crap since the selectedCourse isn't always the edited one...
                CastItem(parameters.Id, ModuleList);
                break;
            case ModalType.Activity:
                selectedItemParent = SelectedModule; //same here...
                CastItem(parameters.Id, ActivityList);
                break;
        }

        caption = parameters.Title;
        modalType = ModalTemplate.Category.SaveNot;
    }

    //on modal close - check if cancel is clicked or not, then call save method
    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            if (editForm is null)
            {
                throw new ArgumentNullException(nameof(editForm));
            }

            var type = editForm.Item.GetType().Name;

            @switch (type)
            {
                case "CourseDto":
                    await SaveItem<CourseDto>(editForm.Item.Id, "api/courses", CourseList);
                    break;
                case "ModuleDto":
                    await SaveItem<ModuleDto>(editForm.Item.Id, "api/modules", ModuleList);
                    break;
                case "ActivityDto":
                    await SaveItem<ActivityDto>(editForm.Item.Id, "api/activities", ActivityList);
                    break;
            }

            //we can send call to save in form if needed
            //await editForm.OnSave();
        }

        //hide the modal
        DialogIsOpen = false;
    }

    //cast item to interface to send into the form
    private void CastItem<T>(int id, List<T> itemList) where T : IEntityDto, new()
    {
        T selectedListItem = new T();

        //if id=0 use the new empty one
        //else get the matching item and cast it
        if (id > 0)
        {
            var temp = itemList.FirstOrDefault(m => m.Id == id);
            selectedListItem = mapper.Map<T>(temp);
            var same = temp.Equals(selectedListItem);
        }

        //set as selected item
        selectedItem = (IEntityDto)selectedListItem;
    }

    //pseudo generic code for handling the form submit, cast it back and save to db
    public async Task SaveItem<T>(int id, string endpoint, List<T> itemList) where T : IEntityDto, new()
    {
        string messageString = string.Empty;

        if (editForm is null)
        {
            throw new ArgumentNullException(nameof(editForm));
        }

        var formItem = (T)editForm.Item;

        if (formItem is null)
        {
            throw new ArgumentNullException(nameof(formItem));
        }

        //set the selected to the edited one and update activities
        var editedItem = itemList.FirstOrDefault(m => m.Id == id);

        //--- make not found insert new thing...
        if (editedItem is null)
        {
            editedItem = new T();
            editedItem = mapper.Map<T>(formItem);
            var newItem = await lmsClient.PostAsync(editedItem, endpoint);

            //----------if newItem = null ?? ----------
            messageString = $"Successfully added {newItem.Title}";

            AlertService.addMessage(new Alert(messageString, Alerts.Success));

            itemList.Add(newItem);
            StateHasChanged();
        }
        else
        {
            //putasync
            var isEdited = await lmsClient.PutAsync(formItem, endpoint);

            if (isEdited)
            {
                messageString = $"Successfully updated {formItem.Title}";
                AlertService.addMessage(new Alert(messageString, Alerts.Success));

                var index = itemList.IndexOf(itemList.First(a => a.Id == formItem.Id));

                //get list again for courses, not sure why it doesn't update
                if (formItem is CourseDto cdto)
                {
                    CourseList[index] = cdto;
                    //await UpdateCourseList();
                    //CourseList = (await lmsClient.GetAsync<CourseDto>(endpoint)).ToList(); // To directly see the updated item in list
                }
                else if (formItem is ModuleDto mdto)
                {
                    //await UpdateModuleList();
                    //ModuleList = (await lmsClient.GetAsync<ModuleDto>(endpoint)).Where(m => m.CourseId.Equals(SelectedCourse.Id)).ToList(); // To directly see the updated item in list
                    ModuleList[index] = mdto;
                }
                else if (formItem is ActivityDto dto)
                {
                    ActivityList[index] = dto;
                    //UpdateActivitiesList();
                    //ActivityItems = (await lmsClient.GetAsync<ActivityDto>(endpoint)).Where(m => m.ModuleId.Equals(SelectedModule.Id)).OrderBy(a => a.StartTime).ToList(); // To directly see the updated item in list
                }
            }
            else
            {
                messageString = $"The update failed";
                AlertService.addMessage(new Alert(messageString, Alerts.Danger));
            }

            StateHasChanged();
        }
    }

    private async Task UpdateCourseList()
    {
        //from courses
        var courses = await lmsClient.GetAsync<CourseDto>("api/courses");
        if (courses == null)
        {
            Console.WriteLine($"Unable to get any courses");
            CourseList = new();
        }
        else
        {
            CourseList = courses.ToList();
        }
        SelectedCourse = CourseList.FirstOrDefault();
        await UpdateModuleList();
        StateHasChanged();
    }

    private async Task UpdateModuleList()
    {
        if (SelectedCourse == null)
        {
            await SelectCourse(1);
        }

       // ModuleList = SelectedCourse!.Modules;

        if (ModuleList.Count == 0)
        {
            SelectedModule = new();
            //ActivityList = new();
        }
        else
        {
            SelectedModule = ModuleList.FirstOrDefault();
            //UpdateActivitiesList();
        }
        StateHasChanged();

    }

    private void UpdateActivitiesList()
    {
        //if (SelectedModule != null && SelectedModule.Activities != null)
        if (SelectedModule != null)
        {
            //ActivityList = ModuleList.FirstOrDefault(m => m.Id == SelectedModule?.Id, new()).Activities ?? new();
            //ActivityList = SelectedModule.Activities.OrderBy(a => a.StartTime).OrderBy(a => a.StartTime).ToList();
        }
        StateHasChanged();
    }

    private async Task SelectCourse(int id)
    {
        SelectedCourse = (await lmsClient.GetByIdAsync<CourseDto>(id, "api/courses"));
        if (SelectedCourse is null)
        {
            SelectedCourse = new();
        }
        if (string.IsNullOrEmpty(SelectedCourse.Title))
        {
            await SelectCourse(1);
            //SelectedCourse = (await lmsClient.GetByIdAsync<CourseDto>(1, "api/courses"));
        }

        await UpdateModuleList();
        //UpdateActivitiesList();
        StateHasChanged();
    }

    //for selecting and moving around the page with javascript
    private async Task OnModuleSelect(int id)
    {
        SelectedModule = ModuleList.FirstOrDefault(m => m.Id == id);

        //UpdateActivitiesList();

        await JsRuntime.InvokeVoidAsync("setSelected", $"card-{SelectedModule.Title}");
        await JsRuntime.InvokeVoidAsync("scrollIntoView", "section-activities");
    }

    private async Task OnActivitySelect(string id)
    {
        await JsRuntime.InvokeVoidAsync("scrollIntoView", $"card-{id}");
    }
}

