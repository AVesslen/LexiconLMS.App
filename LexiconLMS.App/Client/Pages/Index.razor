@using AutoMapper;
@using LexiconLMS.App.Client.Models;
@using Microsoft.AspNetCore.Authorization;
@using LexiconLMS.App.Client.Services;
@using System.Diagnostics;

@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JsRuntime
@inject LMSClient lmsClient
@inject IMapper mapper
@inject AlertService AlertService

@page "/"
@attribute [Authorize]


@if (SelectedCourse.Id == 0)
{
    <div class="text-center">
        <p><em>Loading...</em></p>

        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <PageTitle>@SelectedCourse?.Title</PageTitle>

    <div class="container">
        <div class="align-middle d-flex  flex-row  justify-content-end align-items-center">
            <h1 class="text-muted pe-2 ">
                @SelectedCourse?.Title
            </h1>
            <span class="badge text-muted py-auto align-middle ps-2">
                <span class="d-block">@($"{SelectedCourse?.StartTime.ToString("yy-MM-dd")}")</span>
                <span class="d-block">@($"{SelectedCourse?.EndTime.ToString("yy-MM-dd")}")</span>
            </span>
        </div>
    </div>

    <AlertComponent />
    <AuthorizeView Roles="Admin">

        @* block for courses table *@
        <BlockGroupTemplate Items="CourseList" Context="item" Collapsable="false" Cols="1" Id="section-courses" TableHeaders="TableHeaderList">
            <GroupHeader>Courses</GroupHeader>
            <NewButton><button class="btn btn-primary btn-sm ms-4" @onclick='() => OpenDialog(new ModalForm(){Id=0,Type=ModalType.Course, Title="New Course"})'>New Course</button></NewButton>
            <TableTemplate Context="item">
                <tr>
                    <th scope="row">@item.Id</th>
                    @if (item.Published)
                    {
                        <td><span class="badge bg-success">Active</span></td>
                    }
                    else
                    {
                        <td><span class="badge bg-secondary">Inactive</span></td>
                    }

                    <td><span class="fw-bold">@item.Title</span></td>
                    <td>@item.StartTime.ToString("yyyy-MM-dd")</td>
                    <td>@item.EndTime.ToString("yyyy-MM-dd")</td>
                    <td>@item.Modules.Count</td>
                    <td>@item.Users.Count</td>
                    <td class="text-end">
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button class="btn btn-primary btn-sm" @onclick="() => SelectCourse(item.Id)">Select</button>
                            <button class="btn btn-primary btn-sm" @onclick='() => OpenDialog(new ModalForm(){Id=item.Id,Type=ModalType.Course,Title="Edit Course"})'>Edit</button>
                            @*<button class="btn btn-danger btn-sm" @onclick="() => ModalShow(item.Id)">Delete</button>*@
                        </div>
                    </td>
                </tr>
            </TableTemplate>
        </BlockGroupTemplate>
    </AuthorizeView>
 <AuthorizeView Roles="Student">
    <div class="accordion mb-4" id="week">
        <div class="accordion-item">
            <h4 class="accordion-header" id=@($"accordionHeading-week")>
                <button class="accordion-button h4  collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#accordionCollapse-week" aria-expanded="true" aria-controls="accordionCollapse-week">
                    Upcoming for @SelectedCourse?.Title
                </button>
            </h4>
            <div id="accordionCollapse-week" class="accordion-collapse collapse" aria-labelledby="accordionHeading-week" data-bs-parent="#accordionModules-week">
                <div class="accordion-body">
                    <div class="container">
                        <div class="row">
                            <div class="text-center mb-4">
                                <button class="btn btn-primary btn-sm @(daysToSkip == 0 ? " disabled" : "")" @onclick="() => GetDailyActivities(-5)"><span aria-hidden="true">&laquo;</span></button>
                                <button class="btn btn-primary btn-sm @(DailyActivitites.Count < 5 ? "disabled" : "")" @onclick="() => GetDailyActivities(5)"><span aria-hidden="true">&raquo;</span></button>
                            </div>

                            @foreach (var day in DailyActivitites)
                            {
                                @if (day is not null)
                                {
                                    <div class="col mb-3" id="@day?.FirstOrDefault()?.StartTime.ToString("dddd d/M")">
                                        <h4 class="mt-0 mb-3 text-dark op-8 font-weight-bold">@($"{day?.FirstOrDefault()?.StartTime.ToString("dddd d'/'M")}")</h4>
                                        <ul class="list-timeline list-timeline-dark">
                                            @foreach (var item in day!)
                                            {
                                                @if (item is not null)
                                                {
                                                    <li class="list-timeline-item p-0 pb-3 pb-lg-4 d-flex flex-wrap flex-column">
                                                        <p class="my-0 text-dark flex-fw text-sm ">
                                                            <span class="text-inverse op-8">@item.StartTime.ToString("HH:mm") - @item.EndTime.ToString("HH:mm")</span>
                                                        </p>

                                                        <p class="my-0 flex-fw text-xs text-primary op-8" id="day-1-item-1"><a class="stretched-link" style="cursor:pointer;" @onclick="()=>OnActivitySelect(item.Title)">@item.Title</a></p>

                                                        <h class="my-0 text-dark flex-fw text-sm ">
                                                            <span class="text-inverse op-8"><i>@item.ActivityTypeType</i></span>
                                                        </h>

                                                        <p class="my-0 flex-fw text-xs text-dark op-8" id="day-1-item-1">
                                                            @ExtensionsUtils.TrimString(item.Description,100)
                                                        </p>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </AuthorizeView>

    @* block for module cards *@
    <BlockGroupTemplate Items="ModuleList" Context="item" Collapsable="false" Cols="4" Id="section-modules">
        <GroupHeader>Modules for @SelectedCourse?.Title</GroupHeader>
        <NewButton><button class="btn btn-primary btn-sm ms-4" @onclick='() => OpenDialog(new ModalForm(){Type=ModalType.Module,Title="New Module"})'>New Module</button></NewButton>
        <CardTemplate Context="item">
            <CardModule CardClick="OnModuleSelect" EditClick="OpenDialog" item="item" Muted="true"></CardModule>
        </CardTemplate>
    </BlockGroupTemplate>


    @* block for activity cards *@
    <BlockGroupTemplate Items="ActivityList" Context="item" Collapsable="false" Cols="1" Id="section-activities" Links="true">
        <GroupHeader>My Activities for @SelectedModule?.Title</GroupHeader>
        <NewButton><button class="btn btn-primary btn-sm ms-4" @onclick='() => OpenDialog(new ModalForm(){Type=ModalType.Activity,Title="New Activity"})'>New Activity</button></NewButton>
        <LinkTemplate>
            <div><a style="cursor:pointer;text-decoration:underline;" @onclick="()=>OnActivitySelect(item.Title)">@item.Title</a></div>
        </LinkTemplate>
        <CardTemplate Context="item">
            <CardModule EditClick="OpenDialog" item="item" Shadow="true" Muted="false" Time="true"></CardModule>
        </CardTemplate>
    </BlockGroupTemplate>



    @if (DialogIsOpen)
    {
        <ModalTemplate Caption="@caption"
               OnClose="@OnDialogClose"
               Type="@modalType">
            <FormTemplate>
                <Forms @ref="editForm" Item="@selectedItem" Parent="selectedItemParent">
                </Forms>
            </FormTemplate>
        </ModalTemplate>
    }
}

@code {
    //week
    private DateTime FirstDate { get; set; } = DateTime.Now.AddHours(0);
    int daysToSkip { get; set; }

    private List<List<ActivityDto>> DailyActivitites { get; set; } = new List<List<ActivityDto>>();
    private List<ActivityDto> ActivityItems { get; set; } = new();

    public void GetDailyActivities(int change)
    {
        if (SelectedCourse != null && SelectedCourse.Modules != null)
        {
            ActivityItems = SelectedCourse.Modules
                .SelectMany(m => m.Activities)
                .ToList();
        }

        daysToSkip = daysToSkip + change;
        DailyActivitites = ActivityItems
        .Where(a => (a.StartTime.Date >= FirstDate.Date))
        .OrderBy(a => a.StartTime)
        .GroupBy(p => p.StartTime.Date)
        .Select(g => g.ToList())
        .Skip(daysToSkip)
        .Take(5).ToList();

        StateHasChanged();
    }


    //the lists of items
    private List<CourseDto> CourseList { get; set; } = new();
    private List<ModuleDto> ModuleList
    {

        get
        {
            if (SelectedCourse == null || SelectedCourse.Id == 0)
            {
                SelectedCourse = CourseList.FirstOrDefault() ?? new();
            }
            return CourseList.FirstOrDefault(c => c.Id == SelectedCourse?.Id, new()).Modules ?? new();
        }
        set { ModuleList = value; }
    }
    private List<ActivityDto> ActivityList
    {
        get
        {
            if (SelectedModule?.Id == 0)
            {
                SelectedModule = ModuleList.FirstOrDefault() ?? new();
            }
            return ModuleList.FirstOrDefault(m => m.Id == SelectedModule?.Id, new()).Activities ?? new();
        }
        set { ActivityList = value; }
    }


    //to keep track of selected objects
    private CourseDto? SelectedCourse { get; set; } = new();
    private ModuleDto? SelectedModule { get; set; } = new();

    //to use with the form
    //Copy of dto
    private IEntityDto? selectedItem;
        private IEntityDto? selectedItemParent;

    //reference to the editform and it's members
    private Forms? editForm;

    //for the modal
    private string caption = string.Empty;
    private bool DialogIsOpen = false;
    private ModalTemplate.Category modalType;

    //table headers for the course table
    public List<string> TableHeaderList = new() { "#", "Status", "Title", "Start Time", "End Time", "# Modules", "# Students", "" };


    protected override async Task OnInitializedAsync()
    {
        await UpdateCourseList();
        await GetUserCourse();
        GetDailyActivities(0);
    }

    //get the correct course for the logged in user
    private async Task GetUserCourse()
    {
        //get the course for the logged in user, since it's a string try to parse
        var userCourseIdStr = (await authStateProvider.GetAuthenticationStateAsync()).User.FindFirst("CourseId")?.Value;
        var userCourseIdInt = 0;

        if (!string.IsNullOrEmpty(userCourseIdStr))
        {
            try
            {
                userCourseIdInt = Int32.Parse(userCourseIdStr);
            }
            catch (FormatException)
            {
                Console.WriteLine($"Unable to parse '{userCourseIdStr}'");
            }

            if (userCourseIdInt > 0)
            {
                await SelectCourse(userCourseIdInt);
            }
        }
    }


    //form modal
    private void OpenDialog(ModalForm parameters)
    {
        var type = parameters.Type;
        DialogIsOpen = true;

        @switch (type)
        {
            case ModalType.Course:
                CastItem(parameters.Id, CourseList);
                break;
            case ModalType.Module:
                CastItem(parameters.Id, ModuleList);
                selectedItemParent = SelectedCourse;
                break;
            case ModalType.Activity:
                CastItem(parameters.Id, ActivityList);
                selectedItemParent = SelectedModule;
                break;
        }

        caption = parameters.Title;
        modalType = ModalTemplate.Category.SaveNot;
    }

    //on modal close - check if cancel is clicked or not, then call save method
    private async Task OnDialogClose(bool isOk)
    {
        if (editForm is null)
        {
            throw new ArgumentNullException(nameof(editForm));
        }

        if (isOk)
        {
            //is form valid?
            if (editForm.editContext.Validate())
            {
                var type = editForm.Item.GetType().Name;

                @switch (type)
                {
                    case "CourseDto":
                        await SaveItem<CourseDto>(editForm.Item.Id, "api/courses", CourseList);
                        break;
                    case "ModuleDto":
                        await SaveItem<ModuleDto>(editForm.Item.Id, "api/modules", ModuleList);
                        break;
                    case "ActivityDto":
                        await SaveItem<ActivityDto>(editForm.Item.Id, "api/activities", ActivityList);
                        break;
                }

                //we can send call to save in form if needed
                //await editForm.OnSave();

                DialogIsOpen = false;
            }

        }
        else
        {
            //hide the modal
            DialogIsOpen = false;
        }


    }

    //cast item to interface to send into the form
    private void CastItem<T>(int id, List<T> itemList) where T : IEntityDto, new()
    {
        T selectedListItem = new T();

        //if id=0 use the new empty one
        //else get the matching item and cast it
        if (id > 0)
        {
            var temp = itemList.FirstOrDefault(m => m.Id == id);
            selectedListItem = mapper.Map<T>(temp);
        }

        //set as selected item
        selectedItem = (IEntityDto)selectedListItem;
    }

    //pseudo generic code for handling the form submit, cast it back and save to db
    public async Task SaveItem<T>(int id, string endpoint, List<T> itemList) where T : IEntityDto, new()
    {
        string messageString = string.Empty;

        if (editForm is null)
        {
            throw new ArgumentNullException(nameof(editForm));
        }

        var formItem = (T)editForm.Item;

        if (formItem is null)
        {
            throw new ArgumentNullException(nameof(formItem));
        }

        //set the selected to the edited one and update activities
        var editedItem = itemList.FirstOrDefault(m => m.Id == id);

        if (editedItem is null)
        {
            editedItem = new T();
            editedItem = mapper.Map<T>(formItem);
            var newItem = await lmsClient.PostAsync(editedItem, endpoint);

            if (newItem is null)
            {
                messageString = $"The post failed";
                AlertService.addMessage(new Alert(messageString, Alerts.Danger));
            }
            else
            {
                messageString = $"Successfully added {newItem.Title}";

                AlertService.addMessage(new Alert(messageString, Alerts.Success));

                itemList.Add(newItem);
                StateHasChanged();
            }

        }
        else
        {
            //putasync
            var isEdited = await lmsClient.PutAsync(formItem, endpoint);

            if (isEdited)
            {
                messageString = $"Successfully updated {formItem.Title}";
                AlertService.addMessage(new Alert(messageString, Alerts.Success));

                var index = itemList.IndexOf(itemList.First(a => a.Id == formItem.Id));

                if (formItem is CourseDto cdto)
                {
                    CourseList[index] = cdto;
                }
                else if (formItem is ModuleDto mdto)
                {
                    ModuleList[index] = mdto;
                }
                else if (formItem is ActivityDto dto)
                {
                    ActivityList[index] = dto;
                }
            }
            else
            {
                messageString = $"The update failed";
                AlertService.addMessage(new Alert(messageString, Alerts.Danger));
            }

            StateHasChanged();
        }
    }

    private async Task UpdateCourseList()
    {
        //from courses
        var courses = await lmsClient.GetAsync<CourseDto>("api/courses");
        if (courses == null)
        {
            Console.WriteLine($"Unable to get any courses");
            CourseList = new();
        }
        else
        {
            CourseList = courses.ToList();
        }
        SelectedCourse = CourseList.FirstOrDefault();
        await UpdateModuleList();
        StateHasChanged();
    }

    private async Task UpdateModuleList()
    {
        if (SelectedCourse == null)
        {
            await SelectCourse(1);
        }

        if (ModuleList.Count == 0)
        {
            SelectedModule = new();
        }
        else
        {
            SelectedModule = ModuleList.FirstOrDefault();
        }
        StateHasChanged();

    }


    private async Task SelectCourse(int id)
    {
        SelectedCourse = (await lmsClient.GetByIdAsync<CourseDto>(id, "api/courses"));
        if (SelectedCourse is null)
        {
            SelectedCourse = new();
        }
        if (string.IsNullOrEmpty(SelectedCourse.Title))
        {
            await SelectCourse(1);
        }

        await UpdateModuleList();
        StateHasChanged();
    }

    //for selecting and moving around the page with javascript
    private async Task OnModuleSelect(int id)
    {
        SelectedModule = ModuleList.FirstOrDefault(m => m.Id == id);

        await JsRuntime.InvokeVoidAsync("setSelected", $"card-{SelectedModule.Title}");
        await JsRuntime.InvokeVoidAsync("scrollIntoView", "section-activities");
    }

    private async Task OnActivitySelect(string id)
    {
        await JsRuntime.InvokeVoidAsync("scrollIntoView", $"card-{id}");
    }
}

