@using Microsoft.AspNetCore.Authorization;
@using LexiconLMS.App.Client.Services;

@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime JsRuntime
@inject LMSClient lsmClient;

@page "/"
@attribute [Authorize]

<PageTitle>@Course.Title</PageTitle>

<h1 class="text-end text-muted">@($"{Course.Title} {Course.StartTime.ToString("yy-MM-dd")} - {Course.EndTime.ToString("yy-MM-dd")}")</h1>
<a class="btn btn-primary" @onclick="@(() => OpenDialog(0,"New"))">
    New
</a>
<a class="btn btn-primary" @onclick="@(() => OpenDialog(Course.Id,"Update"))">
    Update
</a>
<button class="btn btn-primary mb-3" @onclick="() => ModalShow(0,1)">New module</button>
<BlockGroupTemplate Items="ModuleItems" Context="item" Collapsable="false" Cols="4" Id="section-modules">
    <GroupHeader>My Modules</GroupHeader>
    <CardTemplate Context="item">
        <CardModule CardClick="OnModuleSelect" item="item" Muted="true"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>

<button class="btn btn-primary mb-3" @onclick="() => ModalShow(0,2)">New activity</button>
<BlockGroupTemplate Items="ActivityItems" Context="item" Collapsable="false" Cols="1" Id="section-activities" Links="true">
    <GroupHeader>My Activities for @SelectedModule.Title</GroupHeader>
    <LinkTemplate>
        <div><a href="#" @onclick="()=>OnActivitySelect(item.Title)">@item.Title</a></div>
    </LinkTemplate>
    <CardTemplate Context="item">
        <CardModule item="item" Shadow="true" Muted="false" Time="true"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>

@*
    section start for testing ModalComponent
*@


@if (DialogIsOpen)
{
    <ModalTemplate Caption="@caption"
                OnClose="@OnDialogClose"
               Type="@modalType">
        <FormTemplate>
          @*  <CreateModuleForm Module="@SelectedModule"></CreateModuleForm>*@
            <TestForm @ref="editForm" Item="@tempItem">
            </TestForm>
        </FormTemplate>
    </ModalTemplate>
}

@*
    section end for testing ModalComponent
*@


@code {

    private CourseDto Course { get; set; } = new();
    private ModuleDto SelectedModule { get; set; } = new();
    private List<ModuleDto> ModuleItems { get; set; } = new();
    private List<ActivityDto> ActivityItems { get; set; } = new();

    /// <summary>
    /// section for testing modalComponent
    /// </summary>
    ///

    //reference to the editform and it's members
    private TestForm? editForm;

@*Added from Courses.razor:*@
@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">       

                <!-- Modal body -->
                <div class="modal-body">
                    @if (@modalType == 0)
                    {
                        <CreateModuleForm CourseId="@Course.Id" SaveEvent="OnSaved" CancelEvent="OnCanceled"></CreateModuleForm>
                    }
                    @if (@modalType == 1)
                    {
                    <CreateActivityForm ModuleId="@SelectedModule.Id" SaveEvent="OnSaved" CancelEvent="OnCanceled"></CreateActivityForm>
                    }
                </div>

            </div>
        </div>
    </div>
}

@code {

    private int idCourse;
    private string test = "Update module";
    private string caption = string.Empty;
    private bool DialogIsOpen = false;
    private ModalTemplate.Category modalType;

    private ModuleDto tempItem = new ModuleDto();

    private void OpenDialog(int id, string title)
    {
        DialogIsOpen = true;

        //change depending on parameters to OpenDialog?
        if (id != 0)
        {
            tempItem = new ModuleDto()
                {
                    Title = SelectedModule.Title,
                    Description = SelectedModule.Description,
                    StartTime = SelectedModule.StartTime,
                    EndTime = SelectedModule.EndTime,
                    Id = SelectedModule.Id,

                    //IEntity doesn't have these...
                    CourseId = SelectedModule.CourseId,
                    Activities = SelectedModule.Activities
                };
        }

        caption = title;
        modalType = ModalTemplate.Category.SaveNot;
    }
    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            await editForm.OnSave();
            //how to differentiate here?


            SelectedModule.Title = tempItem.Title;
            SelectedModule.Description = tempItem.Description;
            SelectedModule.StartTime = tempItem.StartTime;
            SelectedModule.EndTime = tempItem.EndTime;
            SelectedModule.Id = tempItem.Id;

            //await authorService.Delete(idAuthor);
            //authors = await authorService.ListAll((curPage - 1) *
            //pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        }
        DialogIsOpen = false;
    }

    /// <summary>
    /// end section test ModalComponent
    /// </summary>


    protected override async Task OnInitializedAsync()
    {
        //create an empty item of type ModuleDto to not have it empty
        tempItem = new ModuleDto();


        var userCourseIdStr = (await authStateProvider.GetAuthenticationStateAsync()).User.FindFirst("CourseId")?.Value;
        var userCourseIdInt = 0;
        if (!string.IsNullOrEmpty(userCourseIdStr))
        {
            try
            {
                userCourseIdInt = Int32.Parse(userCourseIdStr);
            }
            catch (FormatException)
            {
                Console.WriteLine($"Unable to parse '{userCourseIdStr}'");
            }

            //need to fix all int/str things here!


            if (userCourseIdInt > 0)
            {
                Course = (await lsmClient.GetByIdAsync<CourseDto>(userCourseIdInt.ToString(), "api/courses"));
            }
        }

        if (string.IsNullOrEmpty(Course.Title))
        {
            Course = (await lsmClient.GetByIdAsync<CourseDto>("1", "api/courses"));
        }

        ModuleItems = Course.Modules;
        SelectedModule = ModuleItems.FirstOrDefault();

        ActivityItems = SelectedModule.Activities.OrderBy(a => a.StartTime).ToList();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    //this doesn't work right now... how to fix?
    //    if (firstRender && Course==null)
    //    {
    //       // await JsRuntime.InvokeVoidAsync("setSelected", $"card-{SelectedModule.Title}");
    //        //StateHasChanged();
    //    }
    //}

    private async Task OnModuleSelect(int id)
    {
        SelectedModule = ModuleItems.FirstOrDefault(m => m.Id == id);
        ActivityItems = SelectedModule.Activities.OrderBy(a => a.StartTime).ToList();
        await JsRuntime.InvokeVoidAsync("setSelected", $"card-{SelectedModule.Title}");
        await JsRuntime.InvokeVoidAsync("scrollIntoView", "section-activities");
    }

    private async Task OnActivitySelect(string id)
    {
        await JsRuntime.InvokeVoidAsync("scrollIntoView", $"card-{id}");
    }



    // Added from Courses.razor
    // Create modules

    async Task OnSaved(ModuleDto module)
    {
        var moduleInList = ModuleItems.FirstOrDefault(c => c.Id == module.Id);
        string messageString = string.Empty;

        if (moduleInList == null)
        {
            ModuleItems.Add(module);
            messageString = $"Successfully added {module.Title}";
        }
        else
        {
            if (moduleInList != null)
            {
                moduleInList = module;
                messageString = $"Successfully updated {module.Title}";
            }
        }
        showModal = false;

        //AlertService.addMessage(new Alert(messageString, Alerts.Success));
    }

    async Task OnCanceled(ModuleDto module)
    {

        var moduleInList = ModuleItems.FirstOrDefault(c => c.Id == module.Id);
        if (moduleInList != null)
        {
            moduleInList = module;
        }
        showModal = false;
    }

    // Create activity
    async Task OnSaved(ActivityDto activity)
    {
        var activityInList = ActivityItems.FirstOrDefault(c => c.Id == activity.Id);
        string messageString = string.Empty;

        if (activityInList == null)
        {
            ActivityItems.Add(activity);
            messageString = $"Successfully added {activity.Title}";
        }
        else
        {
            if (activityInList != null)
            {
                activityInList = activity;
                messageString = $"Successfully updated {activity.Title}";
            }
        }
        showModal = false;

        //AlertService.addMessage(new Alert(messageString, Alerts.Success));
    }

    async Task OnCanceled(ActivityDto activity)
    {

        var activityInList = ActivityItems.FirstOrDefault(c => c.Id == activity.Id);
        if (activityInList != null)
        {
            activityInList = activity;
        }
        showModal = false;
    }



    bool showModal = false;
    int modalType;

   private void ModalShow(int id, int type)
    {
        //Course = CourseList.FirstOrDefault(c => c.Id == id, new());
        int modalType = type;
        showModal = true;
    }


}



    @*<CreateCourseForm Course="Course"></CreateCourseForm>*@
@*<CreateCourseForm Course="Test"></CreateCourseForm>*@
@*<CreateCourseForm></CreateCourseForm>*@

@*<CreateModuleForm></CreateModuleForm>*@
@*<CreateModuleForm Course="Course"></CreateModuleForm>*@
@*<CreateModuleForm Module="SelectedModule"></CreateModuleForm>*@

@*<CreateActivityForm Module="SelectedModule"></CreateActivityForm>*@
@*<CreateActivityForm Activity="Activity"></CreateActivityForm>*@
@*<CreateActivityForm></CreateActivityForm>*@