@using Microsoft.AspNetCore.Authorization;
@using LexiconLMS.App.Client.Services;

@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime JsRuntime
@inject LMSClient lsmClient;

@page "/"
@attribute [Authorize]

<PageTitle>@Course.Title</PageTitle>

@*<AuthorizeView>
    <Authorized>*@
<h1 class="text-end text-muted">@($"{Course.Title} {Course.StartTime.ToString("yy-MM-dd")} - {Course.EndTime.ToString("yy-MM-dd")}")</h1>

<BlockGroupTemplate Items="ModuleItems" Context="item" Collapsable="true" Cols="4" Id="section-modules">
    <GroupHeader>My Modules</GroupHeader>
    <CardTemplate Context="item">
        <CardModule CardClick="OnModuleSelect" item="item"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>

<BlockGroupTemplate Items="ActivityItems" Context="item" Collapsable="true" Cols="1" Id="section-activities">
    <GroupHeader>My Activities for @SelectedModule.Title</GroupHeader>
    <CardTemplate Context="item">
        <CardModule item="item" Shadow="true"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>
@*    </Authorized>
    <NotAuthorized>
        <p>Not logged in...</p>
    </NotAuthorized>
</AuthorizeView>*@


@code {
    private CourseDto Course { get; set; } = new();
    private ModuleDto SelectedModule { get; set; } = new();
    private List<ModuleDto> ModuleItems { get; set; } = new();
    private List<ActivityDto> ActivityItems { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        //var user = (await authStateProvider.GetAuthenticationStateAsync()).User;
        //if (user.Identity.IsAuthenticated)
        //{
        Course = (await lsmClient.GetByIdAsync<CourseDto>("1", "api/courses"));
        ModuleItems = Course.Modules;
        SelectedModule = ModuleItems.FirstOrDefault();
        ActivityItems = SelectedModule.Activities;
        //}
    }

    private async Task OnModuleSelect(int id)
    {
        SelectedModule = ModuleItems.FirstOrDefault(m => m.Id == id);
        ActivityItems = SelectedModule.Activities;
       //JSRuntime.("scrollIntoView", "section-activities");
        await JsRuntime.InvokeVoidAsync("scrollIntoView", "section-activities");
    }
}

@*<CreateCourseForm Course="Course"></CreateCourseForm>*@
@*<CreateCourseForm Course="Test"></CreateCourseForm>*@
@*<CreateCourseForm></CreateCourseForm>*@ 

@*<CreateModuleForm></CreateModuleForm>*@
@*<CreateModuleForm Course="Course"></CreateModuleForm>*@
@*<CreateModuleForm Module="SelectedModule"></CreateModuleForm>*@

@*<CreateActivityForm Module="SelectedModule"></CreateActivityForm>*@
@*<CreateActivityForm>Activity="Activity"</CreateActivityForm>*@
<CreateActivityForm></CreateActivityForm>


@code
{
    private ActivityDto Activity = new() { Title = "Code Fundamentals", Description = "fun", StartTime = DateTime.Now, EndTime = DateTime.Now, ModuleId = 1, ActivityTypeId=1};
    private CourseDto Test = new() {Title="net", Description="hjhja hkahkj", EndTime=DateTime.Now };
}