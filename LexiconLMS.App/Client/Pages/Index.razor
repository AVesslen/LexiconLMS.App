@using Microsoft.AspNetCore.Authorization;
@using LexiconLMS.App.Client.Services;

@inject AuthenticationStateProvider authStateProvider;
@inject IJSRuntime JsRuntime
@inject LMSClient lsmClient;

@page "/"
@attribute [Authorize]

<PageTitle>@Course.Title</PageTitle>

<h1 class="text-end text-muted">@($"{Course.Title} {Course.StartTime.ToString("yy-MM-dd")} - {Course.EndTime.ToString("yy-MM-dd")}")</h1>

<BlockGroupTemplate Items="ModuleItems" Context="item" Collapsable="false" Cols="4" Id="section-modules">
    <GroupHeader>My Modules</GroupHeader>
    <CardTemplate Context="item">
        <CardModule CardClick="OnModuleSelect" item="item" Muted="true"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>

<BlockGroupTemplate Items="ActivityItems" Context="item" Collapsable="false" Cols="1" Id="section-activities" Links="true">
    <GroupHeader>My Activities for @SelectedModule.Title</GroupHeader>
    <LinkTemplate>
        <div><a href="#" @onclick="()=>OnActivitySelect(item.Title)">@item.Title</a></div>
    </LinkTemplate>
    <CardTemplate Context="item">
        <CardModule item="item" Shadow="true" Muted="false" Time="true"></CardModule>
    </CardTemplate>
</BlockGroupTemplate>

@*
    section start for testing ModalComponent
*@
<a class="btn btn-warning" @onclick="() => OpenDialog(Course.Id,Course.Description)">
    Delete
</a>

@if (DialogIsOpen)
{
    <ModalComponent Caption="Delete an author"
                Message="@message"
                OnClose="@OnDialogClose"
                Type="ModalComponent.Category.DeleteNot">
    </ModalComponent>
}

@*
    section end for testing ModalComponent
*@


@*<CreateCourseForm Course="Course"></CreateCourseForm>*@
@*<CreateCourseForm Course="Test"></CreateCourseForm>*@
@*<CreateCourseForm></CreateCourseForm>*@

@*<CreateModuleForm></CreateModuleForm>*@
@*<CreateModuleForm Course="Course"></CreateModuleForm>*@
@*<CreateModuleForm Module="SelectedModule"></CreateModuleForm>*@

@*<CreateActivityForm Module="SelectedModule"></CreateActivityForm>*@
@*<CreateActivityForm Activity="Activity"></CreateActivityForm>*@
@*<CreateActivityForm></CreateActivityForm>*@

@code {

    /// <summary>
    /// start section for testing modalComponent
    /// </summary>
    private int idAuthor;
    private string message;
    private bool DialogIsOpen = false;

    private void OpenDialog(int id, string title)
    {
        DialogIsOpen = true;
        idAuthor = id;
        message = "Do you want to delete the course \""
                  + title + "\"?";
    }
    private async Task OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            //await authorService.Delete(idAuthor);
            //authors = await authorService.ListAll((curPage - 1) *
            //pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        }
        DialogIsOpen = false;
    }

    /// <summary>
    /// end section test ModalComponent
    /// </summary>

    private CourseDto Course { get; set; } = new();
    private ModuleDto SelectedModule { get; set; } = new();
    private List<ModuleDto> ModuleItems { get; set; } = new();
    private List<ActivityDto> ActivityItems { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var userCourseIdStr = (await authStateProvider.GetAuthenticationStateAsync()).User.FindFirst("CourseId")?.Value;
        var userCourseIdInt = 0;
        if (!string.IsNullOrEmpty(userCourseIdStr))
        {
            try
            {
                userCourseIdInt = Int32.Parse(userCourseIdStr);
            }
            catch (FormatException)
            {
                Console.WriteLine($"Unable to parse '{userCourseIdStr}'");
            }

            //need to fix all int/str things here!


            if (userCourseIdInt > 0)
            {
                Course = (await lsmClient.GetByIdAsync<CourseDto>(userCourseIdInt.ToString(), "api/courses"));
            }
        }

        if (string.IsNullOrEmpty(Course.Title))
        {
            Course = (await lsmClient.GetByIdAsync<CourseDto>("1", "api/courses"));
        }

        ModuleItems = Course.Modules;
        SelectedModule = ModuleItems.FirstOrDefault();

        ActivityItems = SelectedModule.Activities.OrderBy(a => a.StartTime).ToList();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    //this doesn't work right now... how to fix?
    //    if (firstRender && Course==null)
    //    {
    //       // await JsRuntime.InvokeVoidAsync("setSelected", $"card-{SelectedModule.Title}");
    //        //StateHasChanged();
    //    }
    //}

    private async Task OnModuleSelect(int id)
    {
        SelectedModule = ModuleItems.FirstOrDefault(m => m.Id == id);
        ActivityItems = SelectedModule.Activities.OrderBy(a => a.StartTime).ToList();
        await JsRuntime.InvokeVoidAsync("setSelected", $"card-{SelectedModule.Title}");
        await JsRuntime.InvokeVoidAsync("scrollIntoView", "section-activities");
    }

    private async Task OnActivitySelect(string id)
    {
        await JsRuntime.InvokeVoidAsync("scrollIntoView", $"card-{id}");
    }


}



