@using LexiconLMS.App.Client.Services;

<EditForm EditContext="editContext">
       
    <div class="form-group mb-3">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="Activity.Title" placeholder="Enter title"></InputText>
    </div>
        
    <div class="form-group mb-3">
    <label>Activity type</label>
    <InputSelect class="form-select" @bind-Value="Activity.ActivityTypeId">
            <option selected>-- Select activity type --</option>
            @foreach (var item in ActivityTypes)
            {
                <option value="@item.Id">@item.Type</option>
            }
    </InputSelect>
    </div> 

 @*   <div class="form-group mb-3">
        <label>Course</label>
        <InputSelect 
         Value="Course.Id" 
         ValueChanged="@( async (int selectedId) => await CourseHasChangedAsync(selectedId))"
         ValueExpression="@( () => Course.Id)"
         class="form-select">
            <option selected>-- Select course --</option>
            @foreach (var item in Courses)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </InputSelect>
    </div>*@

   @* <div class="form-group mb-3">
        <label>Module</label>
        <InputSelect class="form-select" @bind-Value="Activity.ModuleId">
            <option selected>-- Select module --</option>           
            @foreach (var item in Modules)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </InputSelect>
    </div> *@

    <div class="form-group mb-3">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="Activity.Description" placeholder="Enter description"></InputTextArea>
    </div>

    <div class="form-group mb-3">
        <label for="startTime">Start date</label>
        <InputDate class="form-control" @bind-Value="Activity.StartTime" placeholder="Enter start date"></InputDate>
    </div>

    <div class="form-group mb-3">
        <label for="endTime">End date</label>
        <InputDate id="endTime" class="form-control" @bind-Value="Activity.EndTime" placeholder="Enter end date"></InputDate>
    </div>    

    @*  <div class="form-check form-switch mb-3">
    <label for="isPublished" class="form-check-label">Publish now</label>
    <InputCheckbox id="publish" class="form-check-input" @bind-Value="@Course.IsPublished"></InputCheckbox>
    </div>  *@

    @* <div class="form-group mb-3">
    <label for="file">Upload file</label>
    <InputFile class="form-control-file" id="file"></InputFile>
    </div>*@
    @* Add OnChange="OnInputFileChange" or bind-value?*@

    <div class="input-group-append input-group-lg">
        <button type="submit" id="save" class="btn btn-success" @onclick="async () => await OnSave()">Save</button>
    </div>

    <div class="input-group-append input-group-lg">
        <button type="button" id="cancel" class="btn btn-danger" @onclick="async () => await OnCancel()">Cancel</button>
    </div>

</EditForm>

@code {

    [Parameter]
    public ActivityDto Activity { get; set; } = new ();

    [Parameter]
    public int ModuleId { get; set; } = new();

    [Parameter]
    public EventCallback<ActivityDto> SaveEvent { get; set; }

    [Parameter]
    public EventCallback<ActivityDto> CancelEvent { get; set; }

    private List<ActivityTypeDto> ActivityTypes { get; set; } = new();
    private CourseDto Course { get; set; } = new ();
    private List<CourseDto> Courses { get; set; } = new();
    private List<ModuleDto> Modules { get; set; } = new();
    public ActivityDto tempActivity { get; set; } = new();
    private EditContext editContext = default!;


    [Inject]
    public LMSClient lmsClient { get; set; } = default!;


    //protected override void OnInitialized()
    //{
    //    if (Activity.StartTime == DateTime.MinValue)
    //    {
    //        Activity.StartTime = DateTime.Now;
    //    }

    //    editContext = new EditContext(Activity);
    //}


    protected override void OnInitialized()
    {
        tempActivity.Title = Activity.Title;
        tempActivity.Description = Activity.Description;
        tempActivity.StartTime = Activity.StartTime;
        tempActivity.EndTime = Activity.EndTime;
        tempActivity.Id = Activity.Id;

        editContext = new EditContext(tempActivity);
    }



    protected async override Task OnInitializedAsync()
    {
        Courses = (await lmsClient.GetAsync<CourseDto>("api/courses")).ToList();
        ActivityTypes = (await lmsClient.GetAsync<ActivityTypeDto>("api/activitytypes")).ToList();
    }

    //public async Task CourseHasChangedAsync(int id)
    //{
    //    Course.Id = id;
    //    Modules = (await lmsClient.GetAsync<ModuleDto>("api/modules")).Where(m => m.CourseId.Equals(id)).ToList();
    //    StateHasChanged();
    //}        

    public async Task OnSave()
    {
        if (Activity is null)
        {
            throw new ArgumentNullException(nameof(Activity));
        }

        if (Activity.Id == 0)
        {
            Activity.ModuleId = ModuleId; ;
            var newActivity = await lmsClient.PostAsync(Activity, "api/activities");     
            await SaveEvent.InvokeAsync(newActivity);
        }
        else
        {
            var isEdited = await lmsClient.PutAsync(Activity, "api/activities");
            await SaveEvent.InvokeAsync(Activity);
        }
    }

 
    public async Task OnCancel()
    {
        Activity.Title = tempActivity.Title;
        Activity.Description = tempActivity.Description;
        Activity.StartTime = tempActivity.StartTime;
        Activity.EndTime = tempActivity.EndTime;
        Activity.Id = tempActivity.Id;
        await CancelEvent.InvokeAsync(Activity);
    }





}
