@using LexiconLMS.App.Client.Services;

<EditForm EditContext="editContext">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    @if (Item.GetType().Name == "ActivityDto")
    {
        var Activity = new ActivityDto();
        Activity = (ActivityDto)Item;

        @*        <div class="form-group mb-3">
            <label>Select module</label>
            <InputNumber class="form-control" @bind-Value="Activity.ModuleId">
            </InputNumber>
        </div>*@

      @*  <div class="form-group mb-3">
            <label>Select type</label>
            <InputNumber class="form-control" @bind-Value="Activity.ActivityTypeId">
            </InputNumber>
        </div>*@
@*        <InputNumber class="form-control" @bind-Value="Activity.ModuleId">
        </InputNumber>*@
        <div class="form-group mb-3">
            <label>Activity type</label>
            <InputSelect class="form-select" @bind-Value="Activity.ActivityTypeId">
                <option selected>-- Select activity type --</option>
                @foreach (var item in ActivityTypes)
                {
                    <option value="@item.Id">@item.Type</option>
                }
            </InputSelect>
        </div>

    }

    @*@if (Item.GetType().Name == "ModuleDto")
    {
        var castedItem = new ModuleDto();
        castedItem = (ModuleDto)Item;
        castedItem.CourseId = Parent.Id;
       <div class="form-group mb-3">
            <label>Select course</label>
            <InputNumber class="form-control" @bind-Value="castedItem.CourseId">
            </InputNumber>
        </div>
    }*@

    <div class="form-group mb-3">
        <label>Title</label>
        <InputText id="title" class="form-control" @bind-Value="Item.Title" placeholder="Enter title"></InputText>
        <ValidationMessage For="@(()=>Item.Title)" />
    </div>

    <div class="form-check form-switch mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="Item.Published" type="checkbox" role="switch" id="flexSwitchCheckChecked" checked />
        <label class="form-check-label" for="flexSwitchCheckChecked">Active</label>
    </div>

    <div class="form-group mb-3">
        <label>Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="Item.Description" placeholder="Enter description"></InputTextArea>
    </div>

    <div class="form-group mb-3">
        <label>Start date</label> 
        <InputDate id="startTime" class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="Item.StartTime" placeholder="Enter start date"></InputDate>
        <ValidationMessage For="@(()=>Item.StartTime)" />
    </div>

    <div class="form-group mb-3">
        <label>End date</label>
        <InputDate id="endTime" class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="Item.EndTime" placeholder="Enter end date"></InputDate>
        <ValidationMessage For="@(()=>Item.EndTime)" />
    </div>

</EditForm>


@code {
    [Parameter]
    public IEntityDto Item { get; set; }
    [Parameter]
    public IEntityDto Parent { get; set; }


    private List<ActivityTypeDto> ActivityTypes { get; set; } = new();

    [Inject]
    public LMSClient lmsClient { get; set; } = default!;

    public EditContext editContext = default!;
    public bool isValid=false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if(Item is not null)
        {       
            editContext = new EditContext(Item);
            editContext.OnFieldChanged += EditContext_OnFieldChanged;

            @if (Item.GetType().Name == "ActivityDto")
            {
                var Activity = new ActivityDto();
                Activity = (ActivityDto)Item;
                Activity.ModuleId = Parent.Id;
            }
            @if (Item.GetType().Name == "ModuleDto")
            {
                var Module = new ModuleDto();
                Module = (ModuleDto)Item;
                Module.CourseId = Parent.Id;
            }
        }
    }

    protected async override Task OnInitializedAsync()
    {       
        await base.OnInitializedAsync();

        ActivityTypes = (await lmsClient.GetAsync<ActivityTypeDto>("api/activitytypes")).ToList();

    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        var test = editContext.Validate();
    }
 
    public async Task OnSave()
    {
        if (Item is null)
        {
            throw new ArgumentNullException(nameof(Item));
        }

        if (Item.Id == 0)
        {
            //set EditContext again to new Item here?
            //var newCourse = await lmsClient.PostAsync(Course, "api/courses");
            Console.WriteLine($"save new {Item.Title}");
        }
        else
        {
            //set EditContext again to new Item here?
            Console.WriteLine($"update {Item.Title}");
        }
    }
}

