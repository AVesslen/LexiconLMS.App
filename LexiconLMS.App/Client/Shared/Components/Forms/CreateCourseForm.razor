@using LexiconLMS.App.Client.Services;

<EditForm EditContext="editContext">    
  
    <div class="form-group mb-3">
        <label>Title</label>
        <InputText id="title" class="form-control" @bind-Value="Course.Title" placeholder="Enter title"></InputText>
    </div>

    <div class="form-group mb-3">
        <label>Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="Course.Description" placeholder="Enter description"></InputTextArea>
    </div>

    <div class="form-group mb-3">
        <label>Start date</label>
        <InputDate class="form-control" @bind-Value="Course.StartTime" placeholder="Enter start date"></InputDate>
    </div>

    <div class="form-group mb-3">
        <label>End date</label>
        <InputDate id="endTime" class="form-control" @bind-Value="Course.EndTime" placeholder="Enter end date"></InputDate>
    </div>

  @*  <div class="form-check form-switch mb-3">
        <label for="isPublished" class="form-check-label">Publish now</label>
        <InputCheckbox id="publish" class="form-check-input" @bind-Value="@Course.IsPublished"></InputCheckbox>
    </div>  *@        
        
   @* <div class="form-group mb-3">
        <label for="file">Upload file</label>
            <InputFile class="form-control-file" id="file"></InputFile>           
        </div>*@
    @* Add OnChange="OnInputFileChange" or bind-value?*@


    <div class="input-group-append input-group-lg">
        <button type="submit" id="save" class="btn btn-success" @onclick="async () => await OnSave()">Save</button>
    </div>

    <div class="input-group-append input-group-lg">
        <button type="button" id="cancel" class="btn btn-danger" @onclick="async () => await OnCancel()">Cancel</button>
    </div>

</EditForm>


@code {
    [Parameter]
    public CourseDto Course { get; set; } = new (); 
    private EditContext editContext = default!;   

    [Inject]
    public LMSClient lmsClient { get; set; } = default!;

    [Parameter]
    public EventCallback<CourseDto> SaveEvent  { get; set; }

    [Parameter]
    public EventCallback<CourseDto> CancelEvent { get; set; }

    CourseDto tempCourse { get; set; } = new();

    protected override void OnInitialized()
    {
        tempCourse.Title = Course.Title;
        tempCourse.Description = Course.Description;
        tempCourse.StartTime = Course.StartTime;
        tempCourse.EndTime = Course.EndTime;
        tempCourse.Id = Course.Id;

        editContext = new EditContext(tempCourse);
        //editContext = new EditContext(Course);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

    }

    public async Task OnSave()
    {
        if (Course is null)
        {
            throw new ArgumentNullException(nameof(Course));
        }

        //Course.Title = tempCourse.Title;
        //Course.Description=tempCourse.Description;
        //Course.StartTime = tempCourse.StartTime;
        //Course.EndTime = tempCourse.EndTime;
        //Course.Id = tempCourse.Id;

        if (Course.Id == 0)
        {
            var newCourse = await lmsClient.PostAsync(Course, "api/courses");
            //if newCourse = null - statusmessage
            await SaveEvent.InvokeAsync(newCourse);
        }
        else
        {
            var isEdited = await lmsClient.PutAsync(Course, "api/courses");  
            //if isEdited = true - statusmessage
            await SaveEvent.InvokeAsync(Course);
        }
    }


    public async Task OnCancel()
    {
        Course.Title = tempCourse.Title;
        Course.Description=tempCourse.Description;
        Course.StartTime = tempCourse.StartTime;
        Course.EndTime = tempCourse.EndTime;
        Course.Id = tempCourse.Id;
        await CancelEvent.InvokeAsync(Course);
    }
   

}
