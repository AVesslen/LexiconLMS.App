@typeparam TItem
@if (Collapsable)
{
    <div class="accordion mb-4" id="@Id">
        <div class="accordion-item">
            <h4 class="accordion-header" id=@($"accordionHeading-{RandomId}")>
                <button class="accordion-button h4" type="button" data-bs-toggle="collapse" data-bs-target=@($"#accordionCollapse-{RandomId}") aria-expanded="true" aria-controls=@($"accordionCollapse-{RandomId}")>
                    @GroupHeader
                </button>
            </h4>
            <div class="text-end">

                
              @*  <button class="btn btn-primary btn-sm me-4 text-end">New</button>*@
            </div>
            <div id=@($"accordionCollapse-{RandomId}") class="accordion-collapse collapse show" aria-labelledby=@($"accordionHeading-{RandomId}") data-bs-parent=@($"#accordionModules-{RandomId}")>
                <div class="accordion-body">
                    @RenderContent()
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="mb-4 border rounded" id="@Id">
        <h4 class="border-bottom p-4">

            @GroupHeader
            @if (NewButton is not null)
            {
                @NewButton
            }
        </h4>
        @RenderContent()
    </div>
}

@code {

    [Parameter] public bool Collapsable { get; set; }
    [Parameter] public bool Links { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public int Cols { get; set; } = 4;
    [Parameter] public RenderFragment? GroupHeader { get; set; }
    [Parameter] public RenderFragment? NewButton { get; set; }
    [Parameter] public RenderFragment<TItem>? CardTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? TableTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? LinkTemplate { get; set; }

    [Parameter] public List<string>? TableHeaders { get; set; }
    [Parameter] public IReadOnlyList<TItem> Items { get; set; }

    private Random random = new Random();
    private string RandomId;

    protected override void OnInitialized()
    {
        RandomId = String.Format("{0:X4}", random.Next(1000));
    }
    private RenderFragment RenderContent() => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "row px-4 pb-4");
        if (CardTemplate is not null)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "row px-4 pb-4");

            if (Links)
            {
                builder.OpenElement(2, "div");
                builder.AddAttribute(3, "class", "col-lg-2 gap-1 ps-0 pe-4 small");

                foreach (var item in Items)
                {
                    builder.AddContent(4, LinkTemplate(item));
                }

                builder.CloseElement(); // close col-lg-2
                builder.OpenElement(5, "div");
                builder.AddAttribute(6, "class", "col");

                foreach (var item in Items)
                {
                    builder.OpenElement(7, "div");
                    builder.AddAttribute(8, "class", $"col-lg-{12 / Cols} mb-4");
                    builder.AddContent(9, CardTemplate(item));
                    builder.CloseElement(); // close col-lg-{12/Cols}
                }

                builder.CloseElement(); // close col
            }
            else
            {

                    foreach (var item in Items)
                    {
                        builder.OpenElement(10, "div");
                        builder.AddAttribute(11, "class", $"col-lg-{12 / Cols} g-4");
                        builder.AddContent(12, CardTemplate(item));
                        builder.CloseElement(); // close col-lg-{12/Cols}
                    }


            }

            builder.CloseElement(); // close row
        }
        Console.WriteLine(TableTemplate);
        if (TableTemplate is not null)

        {
            builder.OpenElement(10, "table");
            builder.AddAttribute(11, "class", "table table-sm align-middle table-hover");
            builder.OpenElement(12, "thead");
            builder.OpenElement(13, "tr");

            foreach (var item in TableHeaders)
            {
                builder.OpenElement(14, "th");
                builder.AddAttribute(15, "scope", "col");
                builder.AddContent(16, item);
                builder.CloseElement();
            }
            builder.CloseElement(); //tr
            builder.CloseElement(); //thead

            builder.OpenElement(17, "tbody");
            foreach (var item in Items)
            {
                builder.AddContent(18, TableTemplate(item));
            }

            builder.CloseElement(); //tbody
            builder.CloseElement(); //table

        }
        builder.CloseElement(); // close row
    };
}
